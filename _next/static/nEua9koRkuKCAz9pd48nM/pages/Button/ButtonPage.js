(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{akZe:function(n,t,e){"use strict";e.d(t,"a",function(){return c});var a=e("pneb"),i=e("ERkP"),o=e.n(i),r=e("R5dR"),s=e("nFRM"),l=o.a.createElement,u=[{name:"margin",types:l(r.a,{href:"/Margin/MarginPage",as:"/margin"},"Margin"),description:"Determines the margin to be applied."},{name:"marginTop",types:l(r.a,{href:"/Margin/MarginPage",as:"/margin"},"Margin"),description:"Determines the top margin to be applied."},{name:"marginRight",types:l(r.a,{href:"/Margin/MarginPage",as:"/margin"},"Margin"),description:"Determines the right margin to be applied."},{name:"marginBottom",types:l(r.a,{href:"/Margin/MarginPage",as:"/margin"},"Margin"),description:"Determines the bottom margin to be applied."},{name:"marginLeft",types:l(r.a,{href:"/Margin/MarginPage",as:"/margin"},"Margin"),description:"Determines the left margin to be applied."},{name:"marginVertical",types:l(r.a,{href:"/Margin/MarginPage",as:"/margin"},"Margin"),description:"Determines the top and bottom margin to be applied."},{name:"marginHorizontal",types:l(r.a,{href:"/Margin/MarginPage",as:"/margin"},"Margin"),description:"Determines the left and right margin to be applied."}],c=function(n){return l(s.a,Object(a.a)({title:"Margin",propList:u},n))}},pg6R:function(n,t,e){"use strict";e.r(t);var a=e("d2TB"),i=e("ERkP"),o=e.n(i),r=e("GsAr"),s=e("lIm4"),l=e("pneb"),u=e("R5dR"),c=e("nFRM"),d=o.a.createElement,p=[{name:"actionType",types:["normal","destructive"],defaultValue:"normal",description:"Indicates whether your button's action is of normal or destructive nature."},{name:"iconLeft",types:d(u.a,{href:"/Icons/IconsPage",as:"/icons"},"Icon"),description:d(o.a.Fragment,null,"Pass in an"," ",d(u.a,{href:"/Icons/IconsPage",as:"/icons"},"Icon")," ","component to display to the left of the text.")},{name:"iconOnly",types:d(u.a,{href:"/Icons/IconsPage",as:"/icons"},"Icon"),description:d(o.a.Fragment,null,"Pass in an"," ",d(u.a,{href:"/Icons/IconsPage",as:"/icons"},"Icon")," ","component to replace content with an icon.")},{name:"iconRight",types:d(u.a,{href:"/Icons/IconsPage",as:"/icons"},"Icon"),description:d(o.a.Fragment,null,"Pass in an"," ",d(u.a,{href:"/Icons/IconsPage",as:"/icons"},"Icon")," ","component to display to the right of the text.")},{name:"isLoading",types:"boolean",defaultValue:"false",description:"Used to determine if component is in a loading state."},{name:"variant",types:["primary","secondary","subtle"],defaultValue:"primary",description:"Determines which style of button to display."}],g=function(n){return d(c.a,Object(l.a)({title:"Button",propList:p},n))},m=e("akZe"),h=o.a.createElement;t.default=function(){return h(o.a.Fragment,null,h(a.H0,null,"Buttons"),h(a.Text,null,"Buttons are calls to action used throughout the product experience."," ",h(a.Link,{href:"https://design.bigcommerce.com/components/buttons",target:"_blank"},"Buttons Design Guidelines"),"."),h(r.a,null,'<Button actionType="normal" isLoading={false} variant="primary">\n  Label\n</Button>'),h(a.H1,null,"API"),h(g,null),h(a.H2,null,"Inherited Props"),h(m.a,{collapsible:!0}),h(a.H1,null,"Variants"),h(a.Text,null,"There are three types of variants to choose from: ",h(s.a,null,"primary"),", ",h(s.a,null,"secondary"),", and"," ",h(s.a,null,"subtle"),". You can determine what type of variant by using the ",h(s.a,{primary:!0},"variant")," prop."),h(r.a,null,'<>\n  <Button variant="primary">Primary</Button>\n  <Button variant="secondary">Secondary</Button>\n  <Button variant="subtle">Subtle</Button>\n</>'),h(a.H1,null,"Action Types"),h(a.Text,null,"There are two action types: ",h(s.a,null,"normal")," & ",h(s.a,null,"destructive"),". They are used to indicate the nature of the action when clicking on the button."),h(r.a,null,'<>\n  <Button actionType="normal">Normal</Button>\n  <Button actionType="destructive">Destructive</Button>\n</>'),h(a.H1,null,"States"),h(a.H2,null,"Loading"),h(a.Text,null,"The loading state is used when clicking a button will perform a asyncronous action."),h(r.a,null,'function LoadingButton() {\n  const [isLoading, setLoading] = React.useState(false);\n\n  function simulateNetworkRequest() {\n    return new Promise(resolve => setTimeout(resolve, 2000));\n  }\n\n  React.useEffect(() => {\n    if (isLoading) {\n      simulateNetworkRequest().then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return (\n    <Button variant="primary" isLoading={isLoading} onClick={!isLoading ? handleClick : () => null}>\n      Click to load\n    </Button>\n  );\n}'),h(a.H2,null,"Disabled"),h(a.Text,null,"A disabled state is used to indicate no action can be done using the button by passing a"," ",h(s.a,{primary:!0},"disabled")," prop."),h(r.a,null,'<>\n  <Button disabled>Disabled</Button>\n  <Button disabled variant="secondary">\n    Disabled\n  </Button>\n  <Button disabled variant="subtle">\n    Disabled\n  </Button>\n</>'),h(a.H1,null,"Icons"),h(a.Text,null,"A button can also include icons on either side of the text (or both). When using ",h(s.a,{primary:!0},"iconOnly"),", the ",h(s.a,{primary:!0},"iconLeft")," & ",h(s.a,{primary:!0},"iconRight")," components will be removed."),h(r.a,null,'<>\n  <Button iconOnly={<AddIcon title="add" />} />\n  <Button iconLeft={<AddIcon />}>Label</Button>\n  <Button iconLeft={<AddIcon />} iconRight={<ArrowDropDownIcon />}>\n    Label\n  </Button>\n  <Button iconRight={<ArrowDropDownIcon />}>Label</Button>\n</>'))}},wXfe:function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/Button/ButtonPage",function(){return e("pg6R")}])}},[["wXfe",0,1]]]);